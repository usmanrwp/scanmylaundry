apply plugin: "com.android.application"

import com.android.build.OutputFile


project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Use international variant JavaScriptCore
 * International variant includes ICU i18n library and necessary data allowing to use
 * e.g. Date.toLocaleString and String.localeCompare that give correct results
 * when using with locales other than en-US.
 * Note that this variant is about 6MiB larger per architecture than default.
 */
def useIntlJsc = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def  n1=versionProps['VERSION_NAME1']
        def  n2=versionProps['VERSION_NAME2']
        def  n3=versionProps['VERSION_NAME3'].toInteger() + 1
        def name = n1+'.'+n2+'.'+n3
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)


    defaultConfig {
        applicationId "com.scanmylaundry"
        minSdkVersion 21
        targetSdkVersion rootProject.ext.targetSdkVersion
//        missingDimensionStrategy 'react-native-camera', 'general'

        // versionCode 1
        // versionName "1.0"
         versionCode code
       versionName "1.0.0." + versionProps['VERSION_CODE']
               multiDexEnabled true
    }
        dexOptions {
            javaMaxHeapSize "4g"
        }
      }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {

        release {
              if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }


    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            // def abi = output.getFilter(OutputFile.ABI)
            // if (abi != null) {  // null for the universal-debug, universal-release variants
            //     output.versionCodeOverride =
            //             versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            // }

              //My Custom name
            def outputDirPath = new File("${project.rootDir.absolutePath}/app/build/outputs/apk/${variant.flavorName}/${variant.buildType.name}")
            variant.packageApplicationProvider.get().outputDirectory = outputDirPath
            def apkFileName = "Essex Laundry V${android.defaultConfig.versionName}.apk"
            output.outputFileName = apkFileName

        }
    }
}
preBuild.doFirst {
    ant.replaceregexp(match: 'android.support.annotation.NonNull;', replace: 'androidx.annotation.NonNull;', flags: 'g', byline: true)
            {
                fileset(dir: '../../node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/transitions/', includes: '*.java')
            }
    ant.replaceregexp(match: 'android.support.annotation.Nullable;', replace: 'androidx.annotation.Nullable;', flags: 'g', byline: true)
            {
                fileset(dir: '../../node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/transitions/', includes: '*.java')
            }
    ant.replaceregexp(match: 'android.support.transition', replace: 'androidx.transition', flags: 'g', byline: true)
            {
                fileset(dir: '../../node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/transitions/', includes: '*.java')
            }
}
dependencies {
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-android-location-enabler')
    implementation project(':react-native-gesture-handler')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:0.20.1"  // From node_modules
    implementation 'com.android.support:multidex:1.0.3'
//    implementation 'androidx.appcompat:appcompat:1.2.0-beta01'
//implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-rc01'

    implementation 'androidx.appcompat:appcompat:1.3.0-beta01'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'

    compile project(':react-native-maps')
//    implementation 'com.airbnb.android:react-native-maps:0.7.1'
//    implementation project(':react-native-maps')
//implementation (project(':react-native-maps')){
//       exclude group: 'com.google.android.gms', module: 'play-services-base'
//       exclude group: 'com.goog                                                              le.android.gms', module: 'play-services-maps'
////   }
//   implementation 'com.google.android.gms:play-services-base:17.2.1'
//   implementation 'com.google.android.gms:play-services-maps:17.0.0'

    // JSC from node_modules
    if (useIntlJsc) {
        implementation 'org.webkit:android-jsc-intl:+'
    } else {
        implementation 'org.webkit:android-jsc:+'
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

project.ext.vectoricons = [
        iconFontNames: [ 'IonIcons.ttf','Raleway-Regular.ttf' ] // Name of the font files you want to copy
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

apply plugin: 'com.google.gms.google-services'
